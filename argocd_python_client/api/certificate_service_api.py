"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from argocd_python_client.api_client import ApiClient, Endpoint as _Endpoint
from argocd_python_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from argocd_python_client.model.runtime_error import RuntimeError
from argocd_python_client.model.v1alpha1_repository_certificate_list import V1alpha1RepositoryCertificateList


class CertificateServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __certificate_service_create_certificate(
            self,
            body,
            **kwargs
        ):
            """Creates repository certificates on the server  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.certificate_service_create_certificate(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (V1alpha1RepositoryCertificateList): List of certificates to be created

            Keyword Args:
                upsert (bool): Whether to upsert already existing certificates.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                V1alpha1RepositoryCertificateList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.certificate_service_create_certificate = _Endpoint(
            settings={
                'response_type': (V1alpha1RepositoryCertificateList,),
                'auth': [],
                'endpoint_path': '/api/v1/certificates',
                'operation_id': 'certificate_service_create_certificate',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                    'upsert',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (V1alpha1RepositoryCertificateList,),
                    'upsert':
                        (bool,),
                },
                'attribute_map': {
                    'upsert': 'upsert',
                },
                'location_map': {
                    'body': 'body',
                    'upsert': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__certificate_service_create_certificate
        )

        def __certificate_service_delete_certificate(
            self,
            **kwargs
        ):
            """Delete the certificates that match the RepositoryCertificateQuery  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.certificate_service_delete_certificate(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                host_name_pattern (str): A file-glob pattern (not regular expression) the host name has to match.. [optional]
                cert_type (str): The type of the certificate to match (ssh or https).. [optional]
                cert_sub_type (str): The sub type of the certificate to match (protocol dependent, usually only used for ssh certs).. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                V1alpha1RepositoryCertificateList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.certificate_service_delete_certificate = _Endpoint(
            settings={
                'response_type': (V1alpha1RepositoryCertificateList,),
                'auth': [],
                'endpoint_path': '/api/v1/certificates',
                'operation_id': 'certificate_service_delete_certificate',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'host_name_pattern',
                    'cert_type',
                    'cert_sub_type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'host_name_pattern':
                        (str,),
                    'cert_type':
                        (str,),
                    'cert_sub_type':
                        (str,),
                },
                'attribute_map': {
                    'host_name_pattern': 'hostNamePattern',
                    'cert_type': 'certType',
                    'cert_sub_type': 'certSubType',
                },
                'location_map': {
                    'host_name_pattern': 'query',
                    'cert_type': 'query',
                    'cert_sub_type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__certificate_service_delete_certificate
        )

        def __certificate_service_list_certificates(
            self,
            **kwargs
        ):
            """List all available repository certificates  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.certificate_service_list_certificates(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                host_name_pattern (str): A file-glob pattern (not regular expression) the host name has to match.. [optional]
                cert_type (str): The type of the certificate to match (ssh or https).. [optional]
                cert_sub_type (str): The sub type of the certificate to match (protocol dependent, usually only used for ssh certs).. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                V1alpha1RepositoryCertificateList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.certificate_service_list_certificates = _Endpoint(
            settings={
                'response_type': (V1alpha1RepositoryCertificateList,),
                'auth': [],
                'endpoint_path': '/api/v1/certificates',
                'operation_id': 'certificate_service_list_certificates',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'host_name_pattern',
                    'cert_type',
                    'cert_sub_type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'host_name_pattern':
                        (str,),
                    'cert_type':
                        (str,),
                    'cert_sub_type':
                        (str,),
                },
                'attribute_map': {
                    'host_name_pattern': 'hostNamePattern',
                    'cert_type': 'certType',
                    'cert_sub_type': 'certSubType',
                },
                'location_map': {
                    'host_name_pattern': 'query',
                    'cert_type': 'query',
                    'cert_sub_type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__certificate_service_list_certificates
        )
